	-- title:  game title
-- author: game developer
-- desc:   short description
-- script: lua
colliders = {
	--top_colliders (1)
	{
		[192]=true, [193]=true, [160]=true, [161]=true, [162]=true, [163]=true, [176]=true, [177]=true
	},
	--solid_colliders (2)
	{
		[160]=true, [161]=true, [162]=true, [163]=true, [176]=true, [177]=true
	}
}




-- tools
function mid(a, b, c) 
    if ((a < b and b < c) or (c < b and b < a)) then
       return b
    elseif ((b < a and a < c) or (c < a and a < b)) then
       return a 
    else
       return c
	end 
end

function limit_speed(num,maximum)
	return mid(-maximum,num,maximum)
end

function lerp(a,b,t) return (1-t)*a + t*b end

function collide_map(obj,aim,flag)
	local x,y,w,h = obj.x,obj.y,obj.w,obj.h
	
	local x1,y1,x2,y2,hb_w,hb_h=0,0,0,0,0,0
	
	if aim=="left" then
		x1,y1,x2,y2=x-1,y,x,y+h-1
		hb_w, hb_h = 1, h
	elseif aim=="right" then
		x1,y1,x2,y2=x+w,y,x+w+1,y+h-1
		hb_w, hb_h = 1, h
	elseif aim=="up" then
		x1,y1,x2,y2=x+1,y-1,x+w-1,y
		hb_w, hb_h = w, 1
	elseif aim=="down" then
		x1,y1,x2,y2=x,y+h,x+w,y+h
		hb_w, hb_h = w, 1
	end

	------- TEST ----------
	rect(x1, y1, hb_w, hb_h, 15)
	-----------------------
	
	--pixels to tiles
	x1 = x1/8
	y1 = y1/8
	x2 = x2/8
	y2 = y2/8

	collider = colliders[flag]
	
	if collider[mget(x1,y1)]
	or collider[mget(x1,y2)]
	or collider[mget(x2,y1)]
	or collider[mget(x2,y2)] then
		return true
	else
		return false
	end
end


-- player
player = {
	sp=1,
	x=59,
	y=59,
	w=8,
	h=8,
	flp=0,
	dx=0,
	dy=0,
	max_dx=2,
	max_dy=3,
	acc=0.5,
	boost=4,
	anim=0,
	running=false,
	jumping=false,
	falling=false,
	sliding=false,
	landed=true
}

function player_upd()
	--physics
	player.dy = player.dy+gravity
	player.dx = player.dx*friction
	
	--controls
	if btn(2) then
		player.dx = player.dx-player.acc
		player.flp = 1
		player.running = true
	end
	if btn(3) then
		player.dx = player.dx + player.acc
		player.flp = 0
		player.running = true
	end
	
	--slide
	if player.running
	and not btn(2)
	and not btn(3)
	and player.landed then
		player.running=false
		player.sliding=true
	end
	
	--jump
	if btnp(4)
	and player.landed then
		player.dy = player.dy-player.boost
		player.landed=false
	end
	
	--check collision up/down
	if player.dy>0 then
		player.falling=true
		player.landed=false
		player.jumping=false
		
		player.dy=limit_speed(player.dy,player.max_dx)
		
		if collide_map(player,"down",1) then
			player.landed=true
			player.falling=false
			player.dy=0
			player.y = player.y - (player.y+player.h)%8
		end
	elseif player.dy<0 then
		player.jumping=true
		if collide_map(player,"up",2) then
			player.dy=0
		end
	end
	
	--check collision l/r
	if player.dx<0 then
		player.dx=limit_speed(player.dx,player.max_dx)
		if collide_map(player,"left",2) then
			player.dx=0
		end
	elseif player.dx>0 then
		player.dx=limit_speed(player.dx,player.max_dx)
		if collide_map(player,"right",2) then
			player.dx=0
		end
	end
	
	--stop sliding
	if player.sliding then
		if math.abs(player.dx) < .2
		or player.running then
			player.dx=0
			player.sliding=false
		end
	end
	
	player.x = player.x + player.dx
	player.y = player.y + player.dy
end

function player_anim()
	if player.jumping then
		player.sp=7
	elseif player.falling then
		player.sp=8
	elseif player.sliding then
		player.sp=9
	elseif player.running then
		if time()-player.anim>100 then
			player.anim=time()
			player.sp = player.sp+1
			if player.sp>6 then
				player.sp=3
			end
		end
	else
		if time()-player.anim>300 then
			player.anim=time()
			player.sp = player.sp+1
			if player.sp>2 then
				player.sp=1
			end
		end
	end
end

game_state = {}

function game_state:init()
	gravity=0.3
	friction=0.85

	--simple camera
	-- cam={x=120-player.x, y=0}
end

function game_state:update()
	t=t+1
	player_upd()
	player_anim()

	-- cam.x=math.min(120,lerp(cam.x,120-player.x,0.5))
	
end

function game_state:draw()
	cls(1)

	-- cam.x=math.min(120,120-player.x)
	-- local ccx,ccy=cam.x/8,cam.y/8 -- camera cell x and y
	-- map(ccx-15,ccy-8,32,17,(cam.x%8)-8,(cam.y%8)-8)

	map(0, 0)

	spr(player.sp, player.x, player.y, 0, 1, player.flp)
end

current_state = game_state

current_state.init()

t=0

function TIC()
	current_state.update()
	current_state.draw()	

	t=t+1
end

-- <TILES>
-- 001:003333300066666006ef1e1006eeeee000066000006666000e0670e000600700
-- 002:003333300066666006ef1e1006eeece0006666000e0660e00006700000600700
-- 003:0003333306666666600eef1e000eeeec0e666000000660000660300000003000
-- 004:0603333360666666000eef1e000eeeec0e666000000660000063000000630000
-- 005:0003333360066666066eef1e000eeeec0e666000000660000770600000006000
-- 006:0003333360666666060eef1e000eeeec0e666000000660000036000000360000
-- 007:0003333300666666060eef1e600eeeec006660000e0660000036000003600000
-- 008:6003333306666666000eef1e000eeeec00006660000066000000063000000063
-- 009:0000000003333300066666006ef1e1006eeece00006666e00e06630000006633
-- 160:9979999979999797479779774794777447747744334447443333433747744377
-- 161:9999999999999997977977949477749474794974447744434334437473344744
-- 162:0099999909999797999777749799444499974444999444339774447397444747
-- 163:9999990079799990477999994497999974479999733999993733777933734479
-- 176:4444444443434474473443444474774444443333444733377347377477447443
-- 177:4477744447733344443347744744437743743337433443344377434444744444
-- 192:3333333377773777737777733333333377737737737777373333333300377300
-- 193:3333333377773777773777373333333377777377737777773333333300000000
-- 208:0037730000337300003773000037730000373300003773000033730000377300
-- 209:0037730000373300003773000037730000333300003773000033730000377300
-- </TILES>

-- <MAP>
-- 008:00000000000000000000000000001c0c1c0c1c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 009:0000000000000000000000000000001d000d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 010:0000000000000000000000000000000d001d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 011:0000000000000000000000000000000d000d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 012:00000000000000000000000000001c0c1c0c1c0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 013:0000000000000000000000000000001d000d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 014:0000000000000000002a1a3a0000000d001d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 015:0a1a0a0a0a0a1a0a0a1b1b1b0a1a0a1a0a0a0a1a0a0a0a0a1a0a0a0a1a0a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- 016:0b0b0b0b1b1b0b0b0b1b0b0b0b0b0b1b0b0b1b1b0b0b0b0b1b0b0b1b0b0b000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
-- </MAP>

-- <WAVES>
-- 000:00000000ffffffff00000000ffffffff
-- 001:0123456789abcdeffedcba9876543210
-- 002:0123456789abcdef0123456789abcdef
-- </WAVES>

-- <SFX>
-- 000:000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000304000000000
-- </SFX>

-- <PALETTE>
-- 000:140c1c44243430346d4e4a4e854c30346524d04648757161597dced27d2c8595a16daa2cd2aa996dc2cadad45edeeed6
-- </PALETTE>

